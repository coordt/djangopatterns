{"body": "<div class=\"section\" id=\"lazy-field-insertion\">\n<h1>Lazy Field Insertion<a class=\"headerlink\" href=\"#lazy-field-insertion\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<a name=\"1a4f588b49caf8810e9c4833a7a5fdaa0e9741c4\"></a><p class=\"last cn\" id=\"1a4f588b49caf8810e9c4833a7a5fdaa0e9741c4\">This is just a stub document. It will be fleshed out more. Please don't comment on it.</p>\n</div>\n<a name=\"f6e3e61683926e1309719081c25658e620e9910c\"></a><p class=\"cn\" id=\"f6e3e61683926e1309719081c25658e620e9910c\">The idea is allow developers to decide which models will have categories in the project\u2019s settings.py, using a dictionary with the model as the key and the field or fields as the value.</p>\n<div class=\"highlight-python\"><pre>'FK_REGISTRY': {\n    'flatpages.flatpage': 'category',\n    'simpletext.simpletext': (\n        'primary_category',\n        {'name': 'secondary_category', 'related_name': 'simpletext_sec_cat'},\n    ),\n},\n'M2M_REGISTRY': {\n    'simpletext.simpletext': {'name': 'categories', 'related_name': 'm2mcats'},\n    'flatpages.flatpage': (\n        {'name': 'other_categories', 'related_name': 'other_cats'},\n        {'name': 'more_categories', 'related_name': 'more_cats'},\n    ),\n},</pre>\n</div>\n<a name=\"7d61ea848fe348a37a0cea503c29c7eff6dbe8bd\"></a><p class=\"cn\" id=\"7d61ea848fe348a37a0cea503c29c7eff6dbe8bd\">at the bottom of the category app's __init__.py, you can read the configuration from settings.</p>\n<a name=\"1e121874028ffdb94a86c242ec982e685eb98dae\"></a><p class=\"cn\" id=\"1e121874028ffdb94a86c242ec982e685eb98dae\">loop through them</p>\n<a name=\"f7f5eafc0747522183b33c5d492d1c3c0edd7486\"></a><p class=\"cn\" id=\"f7f5eafc0747522183b33c5d492d1c3c0edd7486\">Do a bit of error checking</p>\n<a name=\"494c4161b64038192435dfbfc269890e80c30c8c\"></a><p class=\"cn\" id=\"494c4161b64038192435dfbfc269890e80c30c8c\">Load the model class</p>\n<a name=\"0a294c8be65fc66e02c63b011e339141b6bcc463\"></a><p class=\"cn\" id=\"0a294c8be65fc66e02c63b011e339141b6bcc463\">Loop through the given fields</p>\n<a name=\"64d5cf42c8d763e6301ed44dcb4112b7ba41b566\"></a><p class=\"cn\" id=\"64d5cf42c8d763e6301ed44dcb4112b7ba41b566\">We make sure that the field doesn't already exist by attempting to get it</p>\n<a name=\"7ecbf0ba79c40b6e514fb08ceec0c9cba23c8304\"></a><p class=\"cn\" id=\"7ecbf0ba79c40b6e514fb08ceec0c9cba23c8304\">Finally we add the field to the model by instantiating the field and calling its contribute_to_class method.</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">fields</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">FieldDoesNotExist</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AlreadyRegistered</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    An attempt was made to register a model more than once.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"c\"># The field registry keeps track of the individual fields created.</span>\n<span class=\"c\">#  {&#39;app.model.field&#39;: Field(**extra_params)}</span>\n<span class=\"c\">#  Useful for doing a schema migration</span>\n<span class=\"n\">field_registry</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<span class=\"c\"># The model registry keeps track of which models have one or more fields</span>\n<span class=\"c\"># registered.</span>\n<span class=\"c\"># {&#39;app&#39;: [model1, model2]}</span>\n<span class=\"c\"># Useful for admin alteration</span>\n<span class=\"n\">model_registry</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">register_m2m</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">field_name</span><span class=\"o\">=</span><span class=\"s\">&#39;categories&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra_params</span><span class=\"o\">=</span><span class=\"p\">{}):</span>\n    <span class=\"k\">return</span> <span class=\"n\">_register</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">field_name</span><span class=\"p\">,</span> <span class=\"n\">extra_params</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">CategoryM2MField</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">register_fk</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">field_name</span><span class=\"o\">=</span><span class=\"s\">&#39;category&#39;</span><span class=\"p\">,</span> <span class=\"n\">extra_params</span><span class=\"o\">=</span><span class=\"p\">{}):</span>\n    <span class=\"k\">return</span> <span class=\"n\">_register</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">field_name</span><span class=\"p\">,</span> <span class=\"n\">extra_params</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">CategoryFKField</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_register</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">field_name</span><span class=\"p\">,</span> <span class=\"n\">extra_params</span><span class=\"o\">=</span><span class=\"p\">{},</span> <span class=\"n\">field</span><span class=\"o\">=</span><span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">CategoryFKField</span><span class=\"p\">):</span>\n    <span class=\"n\">app_label</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">app_label</span>\n    <span class=\"n\">registry_name</span> <span class=\"o\">=</span> <span class=\"s\">&quot;.&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">((</span><span class=\"n\">app_label</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">__name__</span><span class=\"p\">,</span> <span class=\"n\">field_name</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">registry_name</span> <span class=\"ow\">in</span> <span class=\"n\">field_registry</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"c\">#raise AlreadyRegistered</span>\n    <span class=\"n\">opts</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">_meta</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">opts</span><span class=\"o\">.</span><span class=\"n\">get_field</span><span class=\"p\">(</span><span class=\"n\">field_name</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">FieldDoesNotExist</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">app_label</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">model_registry</span><span class=\"p\">:</span>\n            <span class=\"n\">model_registry</span><span class=\"p\">[</span><span class=\"n\">app_label</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">model</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">model_registry</span><span class=\"p\">[</span><span class=\"n\">app_label</span><span class=\"p\">]:</span>\n            <span class=\"n\">model_registry</span><span class=\"p\">[</span><span class=\"n\">app_label</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n        <span class=\"n\">field_registry</span><span class=\"p\">[</span><span class=\"n\">registry_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">extra_params</span><span class=\"p\">)</span>\n        <span class=\"n\">field_registry</span><span class=\"p\">[</span><span class=\"n\">registry_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">contribute_to_class</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">field_name</span><span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">categories</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">ImproperlyConfigured</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">get_model</span>\n\n<span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">FK_REGISTRY</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">get_model</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">&#39;.&#39;</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"n\">model</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span><span class=\"s\">&#39;</span><span class=\"si\">%s</span><span class=\"s\"> is not a model&#39;</span> <span class=\"o\">%</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)):</span>\n        <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">value</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"nb\">basestring</span><span class=\"p\">):</span>\n                <span class=\"n\">register_fk</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n                <span class=\"n\">field_name</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s\">&#39;name&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">register_fk</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">field_name</span><span class=\"p\">,</span> <span class=\"n\">extra_params</span><span class=\"o\">=</span><span class=\"n\">item</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span><span class=\"s\">&quot;CATEGORY_SETTINGS[&#39;FK_REGISTRY&#39;] doesn&#39;t recognize the value of </span><span class=\"si\">%s</span><span class=\"s\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">basestring</span><span class=\"p\">):</span>\n        <span class=\"n\">register_fk</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n        <span class=\"n\">field_name</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s\">&#39;name&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">register_fk</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">field_name</span><span class=\"p\">,</span> <span class=\"n\">extra_params</span><span class=\"o\">=</span><span class=\"n\">item</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span><span class=\"s\">&quot;CATEGORY_SETTINGS[&#39;FK_REGISTRY&#39;] doesn&#39;t recognize the value of </span><span class=\"si\">%s</span><span class=\"s\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">M2M_REGISTRY</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">get_model</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">&#39;.&#39;</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"n\">model</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span><span class=\"s\">&#39;</span><span class=\"si\">%s</span><span class=\"s\"> is not a model&#39;</span> <span class=\"o\">%</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)):</span>\n        <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">value</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"nb\">basestring</span><span class=\"p\">):</span>\n                <span class=\"n\">register_m2m</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n                <span class=\"n\">field_name</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s\">&#39;name&#39;</span><span class=\"p\">)</span>\n                <span class=\"n\">register_m2m</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">field_name</span><span class=\"p\">,</span> <span class=\"n\">extra_params</span><span class=\"o\">=</span><span class=\"n\">item</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span><span class=\"s\">&quot;CATEGORY_SETTINGS[&#39;M2M_REGISTRY&#39;] doesn&#39;t recognize the value of </span><span class=\"si\">%s</span><span class=\"s\">: </span><span class=\"si\">%s</span><span class=\"s\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">))</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">basestring</span><span class=\"p\">):</span>\n        <span class=\"n\">register_m2m</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n        <span class=\"n\">field_name</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s\">&#39;name&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">register_m2m</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">field_name</span><span class=\"p\">,</span> <span class=\"n\">extra_params</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span><span class=\"s\">&quot;CATEGORY_SETTINGS[&#39;M2M_REGISTRY&#39;] doesn&#39;t recognize the value of </span><span class=\"si\">%s</span><span class=\"s\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n", "display_toc": false, "title": "Lazy Field Insertion", "sourcename": "decorator_apps/lazy_field_insertion.txt", "customsidebar": null, "current_page_name": "decorator_apps/lazy_field_insertion", "next": {"link": "../lazy_manager_insertion/", "title": "Lazy Manager Insertion"}, "rellinks": [["genindex", "General Index", "I", "index"], ["decorator_apps/lazy_manager_insertion", "Lazy Manager Insertion", "N", "next"], ["decorator_apps/change_the_admin_widget", "Change the admin widget of a field", "P", "previous"]], "meta": {}, "parents": [{"link": "../", "title": "Decorator App Patterns"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Lazy Field Insertion</a></li>\n</ul>\n", "prev": {"link": "../change_the_admin_widget/", "title": "Change the admin widget of a field"}, "metatags": ""}