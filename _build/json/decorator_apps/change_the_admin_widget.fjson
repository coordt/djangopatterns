{"body": "<div class=\"section\" id=\"change-the-admin-widget-of-a-field\">\n<h1>Change the admin widget of a field<a class=\"headerlink\" href=\"#change-the-admin-widget-of-a-field\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<a name=\"49f37f1a29b47bf85ce3ac18e98d509847db43dd\"></a><p class=\"last cn\" id=\"49f37f1a29b47bf85ce3ac18e98d509847db43dd\">This is just a stub document. It will be fleshed out more. Please don't comment on it.</p>\n</div>\n<a name=\"80e73e28c9c94cc309bcbcdeeded3afca2e75755\"></a><p class=\"cn\" id=\"80e73e28c9c94cc309bcbcdeeded3afca2e75755\">Django TinyMCE allows you to add TinyMCE functionality to your app if you make certain modifications to your app. This is great if it is your code. However, it doesn\u2019t work so well, if it is someone else\u2019s code. Justin forked Django-TinyMCE to provide this lazy customization.</p>\n<a name=\"6c3db5a1afc7cfd6fe4540d3ed03d5d5a2c68355\"></a><p class=\"cn\" id=\"6c3db5a1afc7cfd6fe4540d3ed03d5d5a2c68355\">The configuration is simple: the app.model name is the key, and then value is a list of fields to have TinyMCE on in the admin.</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">TINYMCE_ADMIN_FIELDS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">&#39;app1.model1&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s\">&#39;body&#39;</span><span class=\"p\">,),</span>\n    <span class=\"s\">&#39;app1.model2&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s\">&#39;blog_text&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;blog_teaser&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<a name=\"37360b6d7c4e6399721b97304585f0e6fb497319\"></a><p class=\"cn\" id=\"37360b6d7c4e6399721b97304585f0e6fb497319\">There are several steps to this process.</p>\n<a name=\"97fc89514d793a710726879731c8db438e4b4885\"></a><p class=\"cn\" id=\"97fc89514d793a710726879731c8db438e4b4885\">The first is creating a REGISTRY variable to hold the Model and field specifications in our settings.py</p>\n<div class=\"highlight-python\"><pre>from django.db.models import get_model\nimport django.conf import settings\n\nREGISTRY = {}\nADMIN_FIELDS = getattr(settings, 'TINYMCE_ADMIN_FIELDS', {})\n\nfor model_name, field in ADMIN_FIELDS.items():\n    if isinstance(model_name, basestring):\n        model = get_model(*model_name.split('.'))\n        if model in registry:\n            return\n        REGISTRY[model] = field</pre>\n</div>\n<a name=\"35a2960956d50f027b3b884db1bed9f0c3eac20b\"></a><p class=\"cn\" id=\"35a2960956d50f027b3b884db1bed9f0c3eac20b\">Next in out admin.py, we declare a Model admin class, with one new attribute: editor_fields. We are also going to override a standard model admin method:</p>\n<a name=\"31ffb404a7b22b304f73094be38629657a8db979\"></a><p class=\"cn\" id=\"31ffb404a7b22b304f73094be38629657a8db979\">formfield for dbfield. This is the method that given a database field will return the form field to render.</p>\n<a name=\"732a4cbbaa1e64ea640cf1719190e71666f0b0f6\"></a><p class=\"cn\" id=\"732a4cbbaa1e64ea640cf1719190e71666f0b0f6\">our overridden method checks to see if this field is in our list of editor_fields, and if so, returns a version using the TinyMCE widget.</p>\n<a name=\"2e12eca7588ec82915ebe08f5e06d57e6b75dce7\"></a><p class=\"cn\" id=\"2e12eca7588ec82915ebe08f5e06d57e6b75dce7\">if the field is not in our list, we punt it back to the super class.</p>\n<a name=\"7a13a100b69f723377a80a453bfd2e568d855a3b\"></a><p class=\"cn\" id=\"7a13a100b69f723377a80a453bfd2e568d855a3b\"><tt class=\"docutils literal\"><span class=\"pre\">admin.py</span></tt></p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"c\"># Define a new ModelAdmin subclass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TinyMCEAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">editor_fields</span> <span class=\"o\">=</span> <span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">formfield_for_dbfield</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">db_field</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">db_field</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">editor_fields</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">db_field</span><span class=\"o\">.</span><span class=\"n\">formfield</span><span class=\"p\">(</span><span class=\"n\">widget</span><span class=\"o\">=</span><span class=\"n\">TinyMCE</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">TinyMCEAdmin</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">formfield_for_dbfield</span><span class=\"p\">(</span>\n            <span class=\"n\">db_field</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<a name=\"3c2ce26f151fa0adf7dd3ee73cd3a91b5bb61507\"></a><p class=\"cn\" id=\"3c2ce26f151fa0adf7dd3ee73cd3a91b5bb61507\">Finally, we put the two pieces together. At the bottom of admin.py we loop through the admin\u2019s current admin registry.</p>\n<a name=\"1de4010e13e584b903d2d668afec7e88b33f800a\"></a><p class=\"cn\" id=\"1de4010e13e584b903d2d668afec7e88b33f800a\">Check if the current iteration is in our registry</p>\n<a name=\"52a797cc93e41edba74845bd1f0146db60cf3509\"></a><p class=\"cn\" id=\"52a797cc93e41edba74845bd1f0146db60cf3509\">if it is, we unregister that model\u2019s current admin</p>\n<a name=\"3f120eebc7ef4a89eea3ca07c90cfcf556f62c54\"></a><p class=\"cn\" id=\"3f120eebc7ef4a89eea3ca07c90cfcf556f62c54\">and then re-register the model with a dynamically-created class called newadmin</p>\n<a name=\"d1cdb876089c60fff7c087643eab7fb04adeac03\"></a><p class=\"cn\" id=\"d1cdb876089c60fff7c087643eab7fb04adeac03\">that is a subclass of our previously declared admin and the model\u2019s current admin</p>\n<a name=\"2f002710a4997ef1d8d25d3fe5c4587532bf0335\"></a><p class=\"cn\" id=\"2f002710a4997ef1d8d25d3fe5c4587532bf0335\">and we set that new class\u2019s editor-fields attribute to the fields in our registry</p>\n<a name=\"4d8726b934314d9511c04b3b0ca14e83f5ece04f\"></a><p class=\"cn\" id=\"4d8726b934314d9511c04b3b0ca14e83f5ece04f\"><tt class=\"docutils literal\"><span class=\"pre\">admin.py</span></tt></p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"k\">for</span> <span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">modeladmin</span> <span class=\"ow\">in</span> <span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">_registry</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"n\">model</span> <span class=\"ow\">in</span> <span class=\"n\">REGISTRY</span><span class=\"p\">:</span>\n        <span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">unregister</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n        <span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span>\n            <span class=\"n\">model</span><span class=\"p\">,</span>\n            <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"s\">&#39;newadmin&#39;</span><span class=\"p\">,</span>\n                <span class=\"p\">(</span><span class=\"n\">TinyMCEAdmin</span><span class=\"p\">,</span> <span class=\"n\">modeladmin</span><span class=\"o\">.</span><span class=\"n\">__class__</span><span class=\"p\">),</span>\n                <span class=\"p\">{</span><span class=\"s\">&#39;editor_fields&#39;</span><span class=\"p\">:</span> <span class=\"n\">REGISTRY</span><span class=\"p\">[</span><span class=\"n\">model</span><span class=\"p\">],}</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n", "display_toc": false, "title": "Change the admin widget of a field", "sourcename": "decorator_apps/change_the_admin_widget.txt", "customsidebar": null, "current_page_name": "decorator_apps/change_the_admin_widget", "next": {"link": "../lazy_field_insertion/", "title": "Lazy Field Insertion"}, "rellinks": [["genindex", "General Index", "I", "index"], ["decorator_apps/lazy_field_insertion", "Lazy Field Insertion", "N", "next"], ["decorator_apps/add_fieldsets_to_model_admin", "Adding fieldsets to a model's admin", "P", "previous"]], "meta": {}, "parents": [{"link": "../", "title": "Decorator App Patterns"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Change the admin widget of a field</a></li>\n</ul>\n", "prev": {"link": "../add_fieldsets_to_model_admin/", "title": "Adding fieldsets to a model's admin"}, "metatags": ""}