{"body": "<div class=\"section\" id=\"views-as-a-package\">\n<h1>Views as a package<a class=\"headerlink\" href=\"#views-as-a-package\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p id=\"1\"><strong>Contributors:</strong> Corey Oordt</p>\n<div class=\"section\" id=\"what-problem-does-this-pattern-solve\">\n<h2>What problem does this pattern solve?<a class=\"headerlink\" href=\"#what-problem-does-this-pattern-solve\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p id=\"2\">Code in <tt class=\"docutils literal\"><span class=\"pre\">views.py</span></tt> has become unmanageable.</p>\n</div>\n<div class=\"section\" id=\"when-to-use-it\">\n<h2>When to use it<a class=\"headerlink\" href=\"#when-to-use-it\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p id=\"3\">You want to refactor your views into several files.</p>\n</div>\n<div class=\"section\" id=\"why-should-i-use-it\">\n<h2>Why should I use it?<a class=\"headerlink\" href=\"#why-should-i-use-it\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p id=\"4\">This pattern allows for refactoring the view code into several files without effecting the import process in other files. In other words <tt class=\"docutils literal\"><span class=\"pre\">from</span> <span class=\"pre\">coolapp.views</span> <span class=\"pre\">import</span> <span class=\"pre\">foo</span></tt> still works.</p>\n</div>\n<div class=\"section\" id=\"implementation\">\n<h2>Implementation<a class=\"headerlink\" href=\"#implementation\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\" id=\"5\">When refactoring your code into multiple files, look deeper and see if there are better ways to accomplish the tasks, such as using generic views.</p>\n</div>\n<div class=\"section\" id=\"python-imports-briefly\">\n<h3>Python <tt class=\"docutils literal\"><span class=\"pre\">import</span></tt>s briefly<a class=\"headerlink\" href=\"#python-imports-briefly\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p id=\"6\">This pattern takes advantage of the way that Python handles importing items into the local namespace. The statement <tt class=\"docutils literal\"><span class=\"pre\">from</span> <span class=\"pre\">foo</span> <span class=\"pre\">import</span> <span class=\"pre\">views</span></tt> will work with code organized as:</p>\n<p class=\"caption\" id=\"7\"><strong>Example 1</strong></p>\n<div class=\"highlight-python\"><pre>foo\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 views.py</pre>\n</div>\n<p id=\"8\">as well as:</p>\n<p class=\"caption\" id=\"9\"><strong>Example 2</strong></p>\n<div class=\"highlight-python\"><pre>foo\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 views\n    \u2514\u2500\u2500 __init__.py</pre>\n</div>\n<p id=\"10\">In the case of Example 2, the contents of <tt class=\"docutils literal\"><span class=\"pre\">foo/views/__init__.py</span></tt> is executed. The <tt class=\"docutils literal\"><span class=\"pre\">__init__.py</span></tt> file is going to be important in the switch from a <a class=\"reference external\" href=\"http://docs.python.org/tutorial/modules.html#modules\">module</a> (one file) to a <a class=\"reference external\" href=\"http://docs.python.org/tutorial/modules.html#packages\">package</a> (directory with <tt class=\"docutils literal\"><span class=\"pre\">__init__.py</span></tt>).</p>\n<p id=\"11\">First rename <tt class=\"docutils literal\"><span class=\"pre\">views.py</span></tt> to something like <tt class=\"docutils literal\"><span class=\"pre\">old_views.py</span></tt> to prevent name confusion. Second create the <tt class=\"docutils literal\"><span class=\"pre\">views</span></tt> directory and add an <tt class=\"docutils literal\"><span class=\"pre\">__init__.py</span></tt> file. Then refactor the <tt class=\"docutils literal\"><span class=\"pre\">old_views.py</span></tt> into two or more files. See Example 3.</p>\n<p class=\"caption\" id=\"12\"><strong>Example 3</strong></p>\n<div class=\"highlight-python\"><pre>foo\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 old_views.py\n\u2514\u2500\u2500 views\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 bar.py\n    \u2514\u2500\u2500 baz.py</pre>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p id=\"13\">When refactoring your views, you will probably need to change imports from other modules in your app, such as models. The statement <tt class=\"docutils literal\"><span class=\"pre\">from</span> <span class=\"pre\">models</span> <span class=\"pre\">import</span> <span class=\"pre\">Foo</span></tt> will no longer work since the <tt class=\"docutils literal\"><span class=\"pre\">models.py</span></tt> file is not in the same directory.</p>\n<p class=\"last\" id=\"14\">Instead, you will need to use a full path import: <tt class=\"docutils literal\"><span class=\"pre\">from</span> <span class=\"pre\">foo.models</span> <span class=\"pre\">import</span> <span class=\"pre\">Foo</span></tt>.</p>\n</div>\n<p id=\"15\">Now, to make imports such as <tt class=\"docutils literal\"><span class=\"pre\">from</span> <span class=\"pre\">views</span> <span class=\"pre\">import</span> <span class=\"pre\">bar_detail_view</span></tt> work, we need to add a couple of lines to <tt class=\"docutils literal\"><span class=\"pre\">views/__init__.py</span></tt></p>\n<p class=\"caption\" id=\"16\"><strong>views/__init__.py</strong></p>\n<div class=\"highlight-python\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1\n2</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre> <span class=\"kn\">from</span> <span class=\"nn\">bar</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n <span class=\"kn\">from</span> <span class=\"nn\">baz</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n</pre></div>\n</td></tr></table></div>\n<p id=\"17\">These statements import all the contents of <tt class=\"docutils literal\"><span class=\"pre\">views.bar</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">views.baz</span></tt> into <tt class=\"docutils literal\"><span class=\"pre\">views</span></tt>. You can limit what is imported with <tt class=\"docutils literal\"><span class=\"pre\">*</span></tt> defining a list named <tt class=\"docutils literal\"><span class=\"pre\">__all__</span></tt> (see <a class=\"reference external\" href=\"http://docs.python.org/tutorial/modules.html#importing-from-a-package\">Importing * from a Package</a>) within the module.</p>\n<p id=\"18\"><tt class=\"docutils literal\"><span class=\"pre\">__all__</span></tt> it is taken to be the list of names that should be imported when <tt class=\"docutils literal\"><span class=\"pre\">from</span> <span class=\"pre\">module</span> <span class=\"pre\">import</span> <span class=\"pre\">*</span></tt> is encountered. Django uses this often, such as in <tt class=\"docutils literal\"><span class=\"pre\">django.conf.urls.defaults</span></tt>.</p>\n<div class=\"admonition attention\">\n<p class=\"first admonition-title\">Attention</p>\n<p class=\"last\" id=\"19\">It is up to you to maintain the <tt class=\"docutils literal\"><span class=\"pre\">__all__</span></tt> list as you update the file.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"sources\">\n<h2>Sources<a class=\"headerlink\" href=\"#sources\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p id=\"20\"><a class=\"reference external\" href=\"http://stackoverflow.com/questions/2675722/django-breaking-up-views\">http://stackoverflow.com/questions/2675722/django-breaking-up-views</a></p>\n</div>\n</div>\n", "display_toc": true, "title": "Views as a package", "sourcename": "app_construction/views_as_a_package.txt", "customsidebar": null, "current_page_name": "app_construction/views_as_a_package", "next": {"link": "../../configuration/", "title": "Configuration Patterns"}, "rellinks": [["genindex", "General Index", "I", "index"], ["configuration/index", "Configuration Patterns", "N", "next"], ["app_construction/version_reporting", "Version Reporting", "P", "previous"]], "meta": {"author": "Corey Oordt"}, "parents": [{"link": "../", "title": "Application Construction"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Views as a package</a><ul>\n<li><a class=\"reference internal\" href=\"#what-problem-does-this-pattern-solve\">What problem does this pattern solve?</a></li>\n<li><a class=\"reference internal\" href=\"#when-to-use-it\">When to use it</a></li>\n<li><a class=\"reference internal\" href=\"#why-should-i-use-it\">Why should I use it?</a></li>\n<li><a class=\"reference internal\" href=\"#implementation\">Implementation</a><ul>\n<li><a class=\"reference internal\" href=\"#python-imports-briefly\">Python <tt class=\"docutils literal\"><span class=\"pre\">import</span></tt>s briefly</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#sources\">Sources</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../version_reporting/", "title": "Version Reporting"}, "metatags": ""}